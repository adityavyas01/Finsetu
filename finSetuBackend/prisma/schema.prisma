generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  username        String
  phoneNumber     String        @unique
  password        String
  isPhoneVerified Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  billSplits      BillSplit[]
  groupMembers    GroupMember[]
  otps            Otp[]
}

model Otp {
  id          Int      @id @default(autoincrement())
  userId      Int
  phoneNumber String
  otp         String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  user        User     @relation(fields: [userId], references: [id])
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   Int
  description String?
  bills       Bill[]
  members     GroupMember[]
}

model GroupMember {
  id       Int      @id @default(autoincrement())
  groupId  Int
  userId   Int
  joinedAt DateTime @default(now())
  isAdmin  Boolean  @default(false)
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
}

model Bill {
  id          Int         @id @default(autoincrement())
  title       String
  amount      Float
  description String?
  paidBy      Int
  groupId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  group       Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  splits      BillSplit[]
}

model BillSplit {
  id     Int       @id @default(autoincrement())
  billId Int
  userId Int
  amount Float
  isPaid Boolean   @default(false)
  paidAt DateTime?
  bill   Bill      @relation(fields: [billId], references: [id], onDelete: Cascade)
  user   User      @relation(fields: [userId], references: [id])

  @@unique([billId, userId])
}
